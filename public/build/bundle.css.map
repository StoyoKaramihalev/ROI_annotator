{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  let files = []\n  let regionFiles = []\n  let selecting = ''\n  let r = 8\n  let currentTime = 0\n  let roi = []\n  let circles = []\n  let regions = {\n    reference: [],\n    referenceValue: ''\n  }\n  let regionCount = 0\n  let svg\n  let downloadName = 'regions.json'\n  let imgEl\n  let circleMouseDown = false\n\n\n  const defineClick = (cx, cy) => {\n    if (circles.length > 1) {\n      let fx = circles[0].x\n      let fy = circles[0].y\n      if (Math.abs(cx - fx) <= r && Math.abs(cy - fy) <= r){\n        cx = fx\n        cy = fy\n        selecting = ''\n      }\n    }\n\n    roi = [...roi, {x: cx, y: cy}]\n    circles = [...circles, {x: cx, y: cy}]\n  }\n  const referClick = (x, y) => {\n    if (regions.reference.length >= 2) return\n    regions.reference = [...regions.reference, {x, y}]\n  }\n  const onClick = ({x, y}) => {\n    if (selecting === '') return\n    let cx = x - svgPos.left\n    let cy = y - svgPos.top\n\n    if (selecting === 'define') defineClick(cx, cy)\n    if (selecting === 'refer') referClick(cx, cy)\n  }\n  const clear = () => {\n    circles = []\n    roi = []\n  }\n  const save = () => {\n    regions[imgName + '_' + currentTime + (++regionCount)] = { name, points:  roi.slice() }\n    roi = []\n    circles = []\n  }\n  const pointify = r => r.map(({x, y}) => `${x},${y}`).join(' ')\n  const setSvgWidth = () => {\n    svg.style.width = imgEl.clientWidth\n    svg.style.height = imgEl.clientHeight\n  }\n  const circleMouseMove = (e, index, key) => {\n    const x = e.clientX - svg.getBoundingClientRect().x\n    const y = e.clientY - svg.getBoundingClientRect().y\n    regions[key].points[index] = {x, y}\n    if (index === 0) regions[key].points[ regions[key].points.length - 1] = {x, y}\n    else if (index ===  regions[key].points.length - 1) regions[key].points[0] = {x, y}\n  }\n  const loadRegion = (e) => {\n    if (e.target.files.length === 0) return\n    const regionFile = e.target.files[0]\n    const reader = new FileReader();\n\n    reader.onload = evt => {\n      regions = Object.assign(regions, JSON.parse(evt.target.result))\n    }\n\n    reader.readAsText(regionFile)\n  }\n\n  $: svgPos = svg && {left: svg.getBoundingClientRect().x, top: svg.getBoundingClientRect().y}\n  $: points = pointify(roi)\n  $: img = files.length > 0 ? files[0] : null\n  $: imgUrl =  img ? URL.createObjectURL(img) : ''\n  $: imgName = img ? img.name : 'unknown'\n  $: name = 'region_' + regionCount\n  $: downloadName = imgName + '.json'\n</script>\n\n<header>\n  <h1>Annotate regions of interest (ROIs)</h1>\n</header>\n<hr style=\"solid\">\n<main>\n<div class=\"row\" style=\"line-height:50%\">\n  <div class=\"column\">\n\t  <p>Select image:</p> \n    <p style=\"font-size:0.8em;font-style:italic;\">Choose a representative frame you wish to annotate.</p>\n    <p><input type=\"file\" accept=\"image/*\" bind:files></p>\n  </div>\n  <div class=\"column\">\n\t  <p>Select regions (optional): </p>\n    <p style=\"font-size:0.8em;font-style:italic;\">If an ROI file already exists, you may load it here.</p>\n    <p><input type=\"file\" accept=\"application/JSON\" on:change={loadRegion}></p>\n  </div>\n  <p>Add reference line:</p>\n  <p style=\"font-size:0.8em;font-style:italic;\">Draw line between two reference points and input </p>\n  <p>\n  <button class:pointer={selecting === 'refer'} on:click={() => selecting = 'refer'}>Draw reference</button>\n     <input bind:value={regions.referenceValue} placeholder=\"Reference value\"/>\n  </p>\n<hr style=\"solid\">\n<div class=\"row\" style = \"text-align:center;\">\n  <button class:pointer={selecting === 'define'} on:click={() => selecting = 'define'}>Define ROI</button>\n  <button on:click={clear}>Clear ROI</button>\n  <button disabled={roi.length < 4} on:click={save}>Save ROI</button>\n  <input bind:value={name} required minlength=\"1\"/>\n\n  <div class=\"container not-selectable\">\n    <svg bind:this={svg} on:click={onClick} class:pointer={selecting !== ''}>\n      {#each Object.entries(regions).filter(([k, v]) => v.points) as [key, {name: rname, points}]}\n        <text x={points[0].x} y={points[0].y - 5} fill=\"white\" class=\"not-selectable\">{rname}</text>\n        <polyline points={pointify(points)} fill=\"none\" stroke=\"darkgreen\" stroke-width=\"2\"/>\n        {#each points as point, index}\n          <circle cx={point.x} cy={point.y} {r} fill=\"darkgreen\" class=\"point\"\n            on:mousemove={e => circleMouseDown && circleMouseMove(e, index, key)}\n            on:mousedown={() => circleMouseDown = true}\n            on:mouseup={() => circleMouseDown = false}\n            on:mouseleave={() => circleMouseDown = false}\n            />\n        {/each}\n      {/each}\n      <polyline {points} fill=\"none\" stroke=\"lightblue\" stroke-width=\"1\" stroke-dasharray=\"5,5\"/>\n      {#each circles as {x, y}}\n        <circle cx={x} cy={y} {r} fill=\"lightblue\"/>\n      {/each}\n      {#if regions.reference.length > 0}\n        <polyline points={pointify(regions.reference)} fill=\"none\" stroke=\"darkred\" stroke-width=\"2\"/>\n      {/if}\n    </svg>\n    <img on:load={setSvgWidth} bind:this={imgEl} src={imgUrl} alt=\" Image for annotation goes here\"/>\n  </div>\n\n  </div>\n\n  {#if Object.keys(regions).length > 0}\n  <div class=\"row\" style=\"text-align:center\">\n  <p>\n    <a download={downloadName} href={`data:application/json,${JSON.stringify(regions, null, 4)}`}>Save</a>\n    <input bind:value={downloadName}/>\n  </p>\n  </div>\n  {/if}\n\n</main>\n\n<footer>\n  <p>Developed by: <a href=\"https://github.com/mkaramihalev\">Marin Karamihalev</a></p>\n  <p>GitHub <a href=\"https://github.com/StoyoKaramihalev/ROI_annotator\">Repository</a></p>\n</footer>\n\n<style>\n\n  header {\n    text-align: center;\n    padding: 0.2em;\n  }\n\n  footer {\n    text-align: center;\n    padding: 2em;\n    font-size: 0.8em;\n  }\n\n  h1 {\n    font-size: 1.5em;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    font-weight: 100;\n  }\n\n  h2 {\n    font-size: 1.1em;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    font-weight: 100;\n  }\n\t\n  main {\n\t\ttext-align: left;\n\t\tpadding: 0.2em;\n    margin: 0 auto;\n    background: rgb(255, 255, 255);\n    width: 100%;\n    height: 80%;\n    font-weight: 100;\n\t}\n  \n  img {\n    border-color: black;\n    border-width: 1px;\n    border-style: dashed;\n    border-radius: 0;\n  }\n  .column {\n    float: left;\n    width: 50%;\n  }\n  .not-selectable {\n    user-select: none;\n  }\n\n  .pointer {\n    cursor: pointer;\n  }\n\n  .container {\n    position: relative;\n  }\n\n  svg {\n    z-index: 2;\n    position: absolute;\n  }\n\n\timg {\n    z-index: 1;\n    height: 40vh;\n  }\n  .point:hover {\n    cursor: pointer;\n  }\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>\n"
  ],
  "names": [],
  "mappings": "AAiKE,MAAM,eAAC,CAAC,AACN,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,KAAK,AAChB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,AAClB,CAAC,AAED,EAAE,eAAC,CAAC,AACF,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,CAC5D,WAAW,CAAE,GAAG,AAClB,CAAC,AAQD,IAAI,eAAC,CAAC,AACN,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,KAAK,CACZ,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,UAAU,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAC9B,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,CACX,WAAW,CAAE,GAAG,AACnB,CAAC,AAEA,GAAG,eAAC,CAAC,AACH,YAAY,CAAE,KAAK,CACnB,YAAY,CAAE,GAAG,CACjB,YAAY,CAAE,MAAM,CACpB,aAAa,CAAE,CAAC,AAClB,CAAC,AACD,OAAO,eAAC,CAAC,AACP,KAAK,CAAE,IAAI,CACX,KAAK,CAAE,GAAG,AACZ,CAAC,AACD,eAAe,eAAC,CAAC,AACf,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,UAAU,eAAC,CAAC,AACV,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,GAAG,eAAC,CAAC,AACH,OAAO,CAAE,CAAC,CACV,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAEF,GAAG,eAAC,CAAC,AACF,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,IAAI,AACd,CAAC,AACD,qBAAM,MAAM,AAAC,CAAC,AACZ,MAAM,CAAE,OAAO,AACjB,CAAC,AAEF,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC"
}